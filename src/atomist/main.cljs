;; Copyright Â© 2020 Atomist, Inc.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns atomist.main
  (:require [atomist.api :as api]
            [cljs.pprint :refer [pprint]]
            [cljs.core.async :refer [<!] :refer-macros [go]]
            [goog.string.format]
            [goog.string :as gstring]
            [clojure.data]
            [atomist.cljs-log :as log]
            [clojure.set]
            [atomist.github]))

(defn create-ref-from-event
  [handler]
  (fn [request]
    (let [[commit] (-> request :subscription :result first)
          repo (:git.commit/repo commit)
          org (:git.repo/org repo)]
      (handler (assoc request :ref {:repo (:git.repo/name repo)
                                    :owner (:git.org/name org)
                                    :sha (:git.commit/sha commit)}
                      :token (:github.org/installation-token org))))))

(defn transact-baseline
  "repository map - must have both host and repository
   vulnerability seq - must have source-id"
  [request repository vulnerabilities]
  (go
    (let [vuln-refs (->> (range 1 (+ 1 (count vulnerabilities)))
                         (map #(gstring/format "vuln-%s" %))
                         (into []))
          vulns (->> (interleave vuln-refs vulnerabilities)
                     (partition 2)
                     (map (fn [[ref vuln]]
                            (-> vuln
                                (select-keys [:vulnerability.cve/source-id])
                                (assoc :schema/entity ref
                                       :schema/entity-type :vulnerability/cve))))
                     (into []))]

      (<! (api/transact
           request
           (concat
            [(-> repository
                 (select-keys [:docker.repository/host :docker.repository/repository])
                 (assoc :schema/entity "$repository"))
             {:schema/entity-type :vulnerability.cve/baseline
              :vulnerability.cve.baseline/on "$repository"
              :vulnerability.cve.baseline/cves {:add vuln-refs}}]
            vulns))))))

(defn check-policy [handler]
  (fn [request]
    (go
      (let [[_ image] (-> request :subscription :result first)
            vulnerabilities (:docker.analysis/vulnerabilities image)
            baseline (-> image :docker.image/repository :vulnerability.cve.baseline/_on first)
            severity-filter (->> (:severity request)
                                 (map #(keyword "vulnerability.cve.severity" %))
                                 (into #{}))
            filtered-vulnerabilities (->> vulnerabilities
                                          (filter #(severity-filter (-> % 
                                                                        :vulnerability.cve/severity
                                                                        :db/ident
                                                                        keyword))))
            title "GCR Vuln Analysis"]
        (log/info "vulnerabilities " vulnerabilities)
        (log/info "baseline " baseline)
        (log/info "filtered vulnerabilities " filtered-vulnerabilities)
        (cond

          ;; the baseline is nil
          (and
           (not baseline)
           (seq filtered-vulnerabilities))
          (do
            (<! (transact-baseline
                 request
                 (:docker.image/repository image)
                 filtered-vulnerabilities))
            (<! (handler (assoc request
                                :atomist/status
                                {:code 0
                                 :reason (gstring/format "set initial baseline for %s"
                                                         (-> image
                                                             :docker.image/repository
                                                             :docker.repository/repository))}
                                :checkrun/output {:title title
                                                  :summary ""}
                                :checkrun/conclusion "neutral"))))

          (and
           baseline
           (seq filtered-vulnerabilities))
          (let [diff (clojure.set/difference
                      (->> filtered-vulnerabilities
                           (map :vulnerability.cve/source-id)
                           (into #{}))
                      (->> (:vulnerability.cve.baseline/cves baseline)
                           (map :vulnerability.cve/source-id)
                           (into #{})))]
            (log/info "diff from baseline:  " diff)
            (if (seq diff)
            ;; has not gotten worse
              (<! (handler (assoc request
                                  :atomist/status
                                  {:code 0
                                   :reason (gstring/format
                                            "%s has unfiltered violations not in the baseline: %s"
                                            (:docker.image/image image)
                                            diff)}
                                  :checkrun/output {:title title
                                                    :summary (gstring/format
                                                              "%s has unfiltered violations not in the baseline: %s"
                                                              (:docker.image/image image)
                                                              diff)}
                                  :checkrun/conclusion "failure")))
              ;; there are additional vulnerabilities not in the baseline
              (<! (handler (assoc request
                                  :atomist/status
                                  {:code 0
                                   :reason (gstring/format
                                            "%s has not gotten worse"
                                            (:docker.image/image image))}
                                  :checkrun/output {:title title
                                                    :summary (gstring/format
                                                              "%s has not gotten worse"
                                                              (:docker.image/image image))}
                                  :checkrun/conclusion "success")))))

          ;; no vulnerabilities meet the criteria
          (not (seq filtered-vulnerabilities))
          (<! (handler (assoc request
                              :atomist/status
                              {:code 0
                               :reason (gstring/format "Clean Vulnerability Scan at level %s" (:severity request))}
                              :checkrun/output {:title title
                                                :summary (gstring/format "Clean Vulnerability Scan at level %s" (:severity request))}
                              :checkrun/conclusion "failure")))

          ;; shouldn't happen
          :else
          (<! (handler (assoc request
                              :atomist/status
                              {:code 1
                               :reason "Unexpected Results - check"}
                              :checkrun/output {:title title
                                                :summary (gstring/format "vulnerability count: " (count vulnerabilities))}
                              :checkrun/conclusion "neutral"))))))))

(enable-console-print!)
(comment
  (go (println (select-keys (<! ((-> #(go %)
                                     (check-policy)
                                     (api/add-skill-config))
                                 {:sendreponse (fn [r] (go (-> r
                                                               (js->clj :keywordize-keys true)
                                                               (select-keys [:entities])
                                                               :entities
                                                               (cljs.reader/read-string)
                                                               (cljs.pprint/pprint))  r))
                                  :subscription {:result [[{}
                                                           {:docker.image/image "gcr.io/project/repository/tag"
                                                            :docker.image/repository
                                                            {:docker.repository/host "gcr.io"
                                                             :docker.repository/repository "project/repository"
                                                             :vulnerability.cve.baseline/_on
                                                             [{:vulnerability.cve.baseline/cves
                                                               [{:vulnerability.cve/source-id "CVE-1"}]}]}
                                                            :docker.analysis/vulnerabilities
                                                            [{:vulnerability.cve/source-id "CVE-1"
                                                              :vulnerability.cve/severity :vulnerability.cve.severity/CRITICAL}]}]]}
                                  :correlation_id "corrid"
                                  :api_version "1"
                                  :configuration {:name "config"
                                                  :parameters [{:name "severity" :value ["CRITICAL"]}]}}))
                            [:atomist/status :checkrun/output :checkrun/conclusion])))
  (go (println (select-keys (<! ((-> #(go %)
                                     (check-policy)
                                     (api/add-skill-config))
                                 {:sendreponse (fn [r] (go (-> r
                                                               (js->clj :keywordize-keys true)
                                                               (select-keys [:entities])
                                                               :entities
                                                               (cljs.reader/read-string)
                                                               (cljs.pprint/pprint))  r))
                                  :subscription {:result [[{}
                                                           {:docker.image/image "gcr.io/project/repository/tag"
                                                            :docker.image/repository
                                                            {:docker.repository/host "gcr.io"
                                                             :docker.repository/repository "project/repository"}
                                                            :docker.analysis/vulnerabilities
                                                            [{:vulnerability.cve/source-id "CVE-1"
                                                              :vulnerability.cve/severity :vulnerability.cve.severity/CRITICAL}]}]]}
                                  :correlation_id "corrid"
                                  :api_version "1"
                                  :configuration {:name "config"
                                                  :parameters [{:name "severity" :value ["CRITICAL"]}]}}))
                            [:atomist/status :checkrun/output :checkrun/conclusion]))))

(defn ^:export handler
  [data sendreponse]
  (api/make-request
   data
   sendreponse
   (-> (api/finished)
       (api/mw-dispatch {:OnAnalysisComplete.edn (-> (api/finished)
                                                     (check-policy)
                                                     (api/with-github-check-run :name "image-vulnerability-policy")
                                                     (api/add-skill-config)
                                                     (create-ref-from-event))})
       (api/log-event)
       (api/status))))
