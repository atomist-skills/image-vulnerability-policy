;; Copyright Â© 2020 Atomist, Inc.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns atomist.main
  (:require [atomist.api :as api]
            [cljs.pprint :refer [pprint]]
            [cljs.core.async :refer [<!] :refer-macros [go]]
            [goog.string.format]
            [clojure.data]
            [atomist.cljs-log :as log]
            [atomist.github]))

(defn create-ref-from-event
  [handler]
  (fn [request]
    (let [[commit] (-> request :subscription :result first)
          repo (:git.commit/repo commit)
          org (:git.repo/org repo)]
      (handler (assoc request :ref {:repo (:git.repo/name repo)
                                    :owner (:git.org/name org)
                                    :sha (:git.commit/sha commit)}
                      :token (:github.org/installation-token org))))))

(defn check-policy [handler]
  (fn [request]
    (go
      (let [[_ image] (-> request :subscription :result first)
            vulnerabilities (:google.analysis/vulnerabilities image)]
        (log/info "vulnerabilities " vulnerabilities)
        (<! (handler (assoc request
                            :atomist/status 
                            {:code 0
                             :reason "vulnerabilities with no baseline"}
                            :checkrun/output {:title "GCR Vuln Analaysis"
                                              :summary (str "vulnerability count: " (count vulnerabilities))}
                            :checkrun/conclusion "neutral")))))))

(defn ^:export handler
  [data sendreponse]
  (api/make-request
   data
   sendreponse
   (-> (api/finished)
       (api/mw-dispatch {:OnAnalysisComplete.edn (-> (api/finished)
                                                     (check-policy)
                                                     (api/with-github-check-run :name "image-vulnerability-policy")
                                                     (create-ref-from-event))})
       (api/log-event)
       (api/status))))
